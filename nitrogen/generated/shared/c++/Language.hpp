///
/// Language.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::multipleimagepicker {

  /**
   * An enum which can be represented as a JavaScript union (Language).
   */
  enum class Language {
    SYSTEM      SWIFT_NAME(system) = 0,
    ZH_HANS      SWIFT_NAME(zhHans) = 1,
    ZH_HANT      SWIFT_NAME(zhHant) = 2,
    JA      SWIFT_NAME(ja) = 3,
    KO      SWIFT_NAME(ko) = 4,
    EN      SWIFT_NAME(en) = 5,
    TH      SWIFT_NAME(th) = 6,
    ID      SWIFT_NAME(id) = 7,
    VI      SWIFT_NAME(vi) = 8,
    RU      SWIFT_NAME(ru) = 9,
    DE      SWIFT_NAME(de) = 10,
    FR      SWIFT_NAME(fr) = 11,
    AR      SWIFT_NAME(ar) = 12,
  } CLOSED_ENUM;

} // namespace margelo::nitro::multipleimagepicker

namespace margelo::nitro {

  // C++ Language <> JS Language (union)
  template <>
  struct JSIConverter<margelo::nitro::multipleimagepicker::Language> final {
    static inline margelo::nitro::multipleimagepicker::Language fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("system"): return margelo::nitro::multipleimagepicker::Language::SYSTEM;
        case hashString("zh-Hans"): return margelo::nitro::multipleimagepicker::Language::ZH_HANS;
        case hashString("zh-Hant"): return margelo::nitro::multipleimagepicker::Language::ZH_HANT;
        case hashString("ja"): return margelo::nitro::multipleimagepicker::Language::JA;
        case hashString("ko"): return margelo::nitro::multipleimagepicker::Language::KO;
        case hashString("en"): return margelo::nitro::multipleimagepicker::Language::EN;
        case hashString("th"): return margelo::nitro::multipleimagepicker::Language::TH;
        case hashString("id"): return margelo::nitro::multipleimagepicker::Language::ID;
        case hashString("vi"): return margelo::nitro::multipleimagepicker::Language::VI;
        case hashString("ru"): return margelo::nitro::multipleimagepicker::Language::RU;
        case hashString("de"): return margelo::nitro::multipleimagepicker::Language::DE;
        case hashString("fr"): return margelo::nitro::multipleimagepicker::Language::FR;
        case hashString("ar"): return margelo::nitro::multipleimagepicker::Language::AR;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum Language - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, margelo::nitro::multipleimagepicker::Language arg) {
      switch (arg) {
        case margelo::nitro::multipleimagepicker::Language::SYSTEM: return JSIConverter<std::string>::toJSI(runtime, "system");
        case margelo::nitro::multipleimagepicker::Language::ZH_HANS: return JSIConverter<std::string>::toJSI(runtime, "zh-Hans");
        case margelo::nitro::multipleimagepicker::Language::ZH_HANT: return JSIConverter<std::string>::toJSI(runtime, "zh-Hant");
        case margelo::nitro::multipleimagepicker::Language::JA: return JSIConverter<std::string>::toJSI(runtime, "ja");
        case margelo::nitro::multipleimagepicker::Language::KO: return JSIConverter<std::string>::toJSI(runtime, "ko");
        case margelo::nitro::multipleimagepicker::Language::EN: return JSIConverter<std::string>::toJSI(runtime, "en");
        case margelo::nitro::multipleimagepicker::Language::TH: return JSIConverter<std::string>::toJSI(runtime, "th");
        case margelo::nitro::multipleimagepicker::Language::ID: return JSIConverter<std::string>::toJSI(runtime, "id");
        case margelo::nitro::multipleimagepicker::Language::VI: return JSIConverter<std::string>::toJSI(runtime, "vi");
        case margelo::nitro::multipleimagepicker::Language::RU: return JSIConverter<std::string>::toJSI(runtime, "ru");
        case margelo::nitro::multipleimagepicker::Language::DE: return JSIConverter<std::string>::toJSI(runtime, "de");
        case margelo::nitro::multipleimagepicker::Language::FR: return JSIConverter<std::string>::toJSI(runtime, "fr");
        case margelo::nitro::multipleimagepicker::Language::AR: return JSIConverter<std::string>::toJSI(runtime, "ar");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert Language to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("system"):
        case hashString("zh-Hans"):
        case hashString("zh-Hant"):
        case hashString("ja"):
        case hashString("ko"):
        case hashString("en"):
        case hashString("th"):
        case hashString("id"):
        case hashString("vi"):
        case hashString("ru"):
        case hashString("de"):
        case hashString("fr"):
        case hashString("ar"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
