///
/// HybridMultipleImagePickerSpec.kt
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

package com.margelo.nitro.multipleimagepicker

import androidx.annotation.Keep
import com.facebook.jni.HybridData
import com.facebook.proguard.annotations.DoNotStrip
import com.margelo.nitro.core.*

/**
 * A Kotlin class representing the MultipleImagePicker HybridObject.
 * Implement this abstract class to create Kotlin-based instances of MultipleImagePicker.
 */
@DoNotStrip
@Keep
@Suppress(
  "KotlinJniMissingFunction", "unused",
  "RedundantSuppression", "RedundantUnitReturnType", "SimpleRedundantLet",
  "LocalVariableName", "PropertyName", "PrivatePropertyName", "FunctionName"
)
abstract class HybridMultipleImagePickerSpec: HybridObject() {
  @DoNotStrip
  private var mHybridData: HybridData = initHybrid()

  init {
    super.updateNative(mHybridData)
  }

  override fun updateNative(hybridData: HybridData) {
    mHybridData = hybridData
    super.updateNative(hybridData)
  }

  // Properties
  

  // Methods
  abstract fun openPicker(config: NitroConfig, resolved: (result: Array<PickerResult>) -> Unit, rejected: (reject: Double) -> Unit): Unit
  
  @DoNotStrip
  @Keep
  private fun openPicker_cxx(config: NitroConfig, resolved: Func_void_std__vector_PickerResult_, rejected: Func_void_double): Unit {
    val __result = openPicker(config, resolved, rejected)
    return __result
  }
  
  abstract fun openCrop(image: String, config: NitroCropConfig, resolved: (result: CropResult) -> Unit, rejected: (reject: Double) -> Unit): Unit
  
  @DoNotStrip
  @Keep
  private fun openCrop_cxx(image: String, config: NitroCropConfig, resolved: Func_void_CropResult, rejected: Func_void_double): Unit {
    val __result = openCrop(image, config, resolved, rejected)
    return __result
  }
  
  abstract fun openPreview(media: Array<MediaPreview>, index: Double, config: NitroPreviewConfig, onLongPress: (index: Double) -> Unit): Unit
  
  @DoNotStrip
  @Keep
  private fun openPreview_cxx(media: Array<MediaPreview>, index: Double, config: NitroPreviewConfig, onLongPress: Func_void_double): Unit {
    val __result = openPreview(media, index, config, onLongPress)
    return __result
  }
  
  abstract fun openCamera(config: NitroCameraConfig, resolved: (result: CameraResult) -> Unit, rejected: (reject: Double) -> Unit): Unit
  
  @DoNotStrip
  @Keep
  private fun openCamera_cxx(config: NitroCameraConfig, resolved: Func_void_CameraResult, rejected: Func_void_double): Unit {
    val __result = openCamera(config, resolved, rejected)
    return __result
  }

  private external fun initHybrid(): HybridData

  companion object {
    private const val TAG = "HybridMultipleImagePickerSpec"
  }
}
